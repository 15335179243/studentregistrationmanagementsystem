package com.tanrice.studentregistrationmanagementsystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tanrice.studentregistrationmanagementsystem.basedata.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserPwd = new Property(2, String.class, "userPwd", false, "USER_PWD");
        public final static Property Age = new Property(3, int.class, "age", false, "AGE");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property School = new Property(6, String.class, "school", false, "SCHOOL");
        public final static Property StudentNumber = new Property(7, String.class, "studentNumber", false, "STUDENT_NUMBER");
        public final static Property Department = new Property(8, String.class, "department", false, "DEPARTMENT");
        public final static Property Student = new Property(9, Boolean.class, "student", false, "STUDENT");
        public final static Property Teacher = new Property(10, Boolean.class, "teacher", false, "TEACHER");
        public final static Property RegistrationProject = new Property(11, int.class, "registrationProject", false, "REGISTRATION_PROJECT");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_PWD\" TEXT," + // 2: userPwd
                "\"AGE\" INTEGER NOT NULL ," + // 3: age
                "\"GENDER\" TEXT," + // 4: gender
                "\"NAME\" TEXT," + // 5: name
                "\"SCHOOL\" TEXT," + // 6: school
                "\"STUDENT_NUMBER\" TEXT," + // 7: studentNumber
                "\"DEPARTMENT\" TEXT," + // 8: department
                "\"STUDENT\" INTEGER," + // 9: student
                "\"TEACHER\" INTEGER," + // 10: teacher
                "\"REGISTRATION_PROJECT\" INTEGER NOT NULL );"); // 11: registrationProject
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(3, userPwd);
        }
        stmt.bindLong(4, entity.getAge());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        String studentNumber = entity.getStudentNumber();
        if (studentNumber != null) {
            stmt.bindString(8, studentNumber);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(9, department);
        }
 
        Boolean student = entity.getStudent();
        if (student != null) {
            stmt.bindLong(10, student ? 1L: 0L);
        }
 
        Boolean teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindLong(11, teacher ? 1L: 0L);
        }
        stmt.bindLong(12, entity.getRegistrationProject());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(3, userPwd);
        }
        stmt.bindLong(4, entity.getAge());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        String studentNumber = entity.getStudentNumber();
        if (studentNumber != null) {
            stmt.bindString(8, studentNumber);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(9, department);
        }
 
        Boolean student = entity.getStudent();
        if (student != null) {
            stmt.bindLong(10, student ? 1L: 0L);
        }
 
        Boolean teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindLong(11, teacher ? 1L: 0L);
        }
        stmt.bindLong(12, entity.getRegistrationProject());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPwd
            cursor.getInt(offset + 3), // age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // school
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // studentNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // department
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // student
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // teacher
            cursor.getInt(offset + 11) // registrationProject
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.getInt(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSchool(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStudentNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartment(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStudent(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setTeacher(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setRegistrationProject(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
